{"version":3,"file":"meepo-idesign-share.umd.min.js","sources":["~/meepo-idesign-share/guid.ts","~/meepo-idesign-share/types.ts","~/meepo-idesign-share/ng-component.ts","~/meepo-idesign-share/components/base.ts","~/meepo-idesign-share/components/color/color.ts","~/meepo-idesign-share/components/size/size.ts","~/meepo-idesign-share/components/background/background.ts","~/meepo-idesign-share/components/margin/margin.ts","~/meepo-idesign-share/components/padding/padding.ts","~/meepo-idesign-share/components/border/border.ts","~/meepo-idesign-share/components/swiper/swiper.ts","~/meepo-idesign-share/components/position/position.ts","~/meepo-idesign-share/components/public_api.ts","~/meepo-idesign-share/ng-each-of.ts","~/meepo-idesign-share/design-share.module.ts"],"sourcesContent":["\n/**\n * @return {?}\n */\nexport function guid() {\n/**\n * @return {?}\n */\nfunction S4() {\n        return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\n    }\n    return (S4() + S4() + \"-\" + S4() + \"-\" + S4() + \"-\" + S4() + \"-\" + S4() + S4() + S4());\n}\n","import { Type, Injector, NgModuleFactory } from '@angular/core';\n/**\n * @template T\n * @param {?} arr\n * @return {?}\n */\nfunction flatten<T>(arr: T[][]): T[] {\n    return Array.prototype.concat.apply([], arr);\n}\n// 页面组件结构\nexport interface DesignLibraryProp {\n    children: DesignLibraryProp[];\n    name: string;\n    uuid?: string;\n    props: any,\n    state?: any,\n    title: string;\n    father?: string;\n}\n// 历史记录结构\nexport interface DesignHistoryProp {\n    name: string;\n    data: DesignLibraryProp[];\n}\n\n\n\n\nimport { Injectable, InjectionToken, Inject } from '@angular/core';\nimport { Subject } from 'rxjs/Subject';\nimport { of } from 'rxjs/observable/of';\nimport'rxjs/add/operator/switchMap';\nimport { guid } from './guid';\n\nexport const /** @type {?} */ DESIGN_LIBRARYS = new InjectionToken('DESIGN_LIBRARYS');\nexport const /** @type {?} */ instancesMap: Map<string, { setting: any, view: any }> = new Map();\nexport class InstanceComponent {\n/**\n * @param {?} guid\n * @param {?} props\n * @param {?} instance\n */\nconstructor(\npublic guid: string,\npublic props: DesignLibraryProp,\npublic instance: any\n    ) { }\n}\n\nfunction InstanceComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nInstanceComponent.prototype.guid;\n/** @type {?} */\nInstanceComponent.prototype.props;\n/** @type {?} */\nInstanceComponent.prototype.instance;\n}\n\nexport class DesignApiService {\nconstructor() { }\n/**\n * @param {?} id\n * @return {?}\n */\nget(id: string) {\n        return instancesMap.get(id);\n    }\n/**\n * @param {?} instance\n * @param {?} designLibraryProp\n * @param {?} isPreview\n * @return {?}\n */\nsave(instance: any, designLibraryProp: any, isPreview) {\n        const /** @type {?} */ instanceComponent = new InstanceComponent(instance.guid, designLibraryProp, instance);\n        if (isPreview) {\n            let /** @type {?} */ map = instancesMap.get(instance.guid);\n            if (map) {\n                map.view = instanceComponent;\n            } else {\n                map = {\n                    setting: null,\n                    view: instanceComponent\n                }\n            }\n            instancesMap.set(instance.guid, map);\n        } else {\n            let /** @type {?} */ map = instancesMap.get(instance.guid);\n            if (map) {\n                map.setting = instanceComponent;\n            } else {\n                map = {\n                    setting: instanceComponent,\n                    view: null\n                }\n            }\n            instancesMap.set(instance.guid, map);\n        }\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction DesignApiService_tsickle_Closure_declarations() {\n/** @type {?} */\nDesignApiService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDesignApiService.ctorParameters;\n}\n\nexport const /** @type {?} */ DESIGN_COMPONENTS = new InjectionToken('DESIGN_COMPONENTS');\nimport'rxjs/add/operator/map';\nimport { FormGroup, FormControl, FormBuilder } from '@angular/forms';\nexport class DesignPropsService {\n    // 所有props\n    props: any[] = [];\n    // 当前页面\n    pageProps: DesignLibraryProp[] = [];\n    // 设置\n    _settingProps: DesignLibraryProp;\n    settingForm: FormGroup;\n/**\n * @param {?} val\n * @return {?}\n */\nset settingProps(val: DesignLibraryProp) {\n        this._settingProps = val;\n        try {\n            this.settingForm.get('content').setValue(this._settingProps.props['content']);\n        } catch ( /** @type {?} */err) {\n            this.settingForm.addControl('content', new FormControl(this._settingProps.props['content']))\n        }\n        try {\n            if (!this._settingProps) {\n                this.fathersProps = [];\n            }\n            this.fathers = this.getFather(this.settingProps);\n            if (this.fathers && this.fathers.length > 0) {\n                this.fathersProps = [];\n                this.fathers.map(res => {\n                    const /** @type {?} */ props = this.getPropsByUid(res);\n                    if (props) {\n                        this.fathersProps.push(props);\n                    }\n                });\n            }\n        } catch ( /** @type {?} */err) { }\n    }\n/**\n * @return {?}\n */\nget settingProps() {\n        return this._settingProps;\n    }\n    instance: any;\n    // 多级\n    fathers: any;\n    fathersProps: DesignLibraryProp[] = [];\n\n    historyKey: string = 'historyKey';\n    // 历史记录\n    historys: any[] = [];\n\n    removePosition: number[] = [];\n/**\n * @param {?} props\n * @param {?} library\n * @param {?} fb\n */\nconstructor(\n         props: any,\npublic library: DesignLibraryService,\nprivate fb: FormBuilder\n    ) {\n        this.props = flatten(props);\n        try {\n            this.backToHistory();\n        } catch (err) {\n            localStorage.clear();\n        }\n        this.settingForm = this.fb.group({\n            content: ''\n        });\n        this.settingForm.valueChanges.subscribe(res => {\n            this._settingProps.props['content'] = res.content;\n        });\n    }\n/**\n * @param {?} designLibraryProp\n * @param {?} instance\n * @return {?}\n */\nsetActiveSettingProps(designLibraryProp: any, instance: any) {\n        this.settingProps = designLibraryProp;\n        if (this.instance) {\n            this.instance.removeClass('is-focus');\n        }\n        this.instance = instance;\n        instance.addClass('is-focus');\n    }\n/**\n * @param {?} name\n * @return {?}\n */\ngetPropsByName(name: string): DesignLibraryProp {\n        let /** @type {?} */ com: DesignLibraryProp;\n        this.props.forEach((item) => {\n            if (name === item.name) {\n                com = item;\n            }\n        });\n        return com;\n    }\n/**\n * @param {?} name\n * @param {?=} father\n * @return {?}\n */\naddPropByName(name: string, father?: string) {\n        const /** @type {?} */ com = this.getPropsByName(name);\n        const /** @type {?} */ deepCopyCom: DesignLibraryProp = this.deepCopy(com);\n        if (deepCopyCom) {\n            if (deepCopyCom.uuid) {\n                // 交换位置\n            } else {\n                deepCopyCom.uuid = guid();\n                deepCopyCom.father = father || '';\n                const /** @type {?} */ lib = this.library.get(deepCopyCom.name);\n                deepCopyCom.props = new lib.default();\n                this.pageProps.push(deepCopyCom);\n                this.updateHistory();\n            }\n        }\n    }\n/**\n * @param {?} name\n * @return {?}\n */\naddPropsToInstanceByName(name: string) {\n        let /** @type {?} */ props = this.getPropsByName(name);\n        if (props) {\n            if (this.instance) {\n                const /** @type {?} */ deepProps = this.deepCopy(props);\n                deepProps.father = this.instance.guid;\n                const /** @type {?} */ lib = this.library.get(deepProps.name);\n                deepProps.props = new lib.default();\n                deepProps.uuid = guid();\n                this.instance.props.children = this.instance.props.children || [];\n                this.instance.props.children.push(deepProps);\n            } else {\n                const /** @type {?} */ deepProps = this.deepCopy(props);\n                deepProps.father = null;\n                const /** @type {?} */ lib = this.library.get(deepProps.name);\n                deepProps.props = new lib.default();\n                deepProps.uuid = guid();\n                this.pageProps.push(deepProps);\n            }\n        }\n    }\n/**\n * @return {?}\n */\ntoFatherProps() {\n        console.log(this.fathersProps);\n    }\n/**\n * @param {?} obj\n * @return {?}\n */\ndeepCopy(obj: any) {\n        try {\n            return JSON.parse(JSON.stringify(obj));\n        } catch ( /** @type {?} */err) {\n            console.dir(obj);\n        }\n    }\n/**\n * @param {?} name\n * @return {?}\n */\nprivate isGuid(name: string) {\n        return name.indexOf('guid_') > -1;\n    }\n/**\n * @param {?} name\n * @return {?}\n */\nprivate trimGuid(name: string) {\n        return name.replace('guid_', '');\n    }\n/**\n * @param {?} uuid\n * @return {?}\n */\nremovePropsByUid(uuid: string) {\n        uuid = this.trimGuid(uuid);\n        let /** @type {?} */ props = this.getPropsByUid(uuid);\n        if (props) {\n            if (props.father) {\n                let /** @type {?} */ father: any = this.getPropsByUid(props.father);\n                try {\n                    let /** @type {?} */ index = father.props.children.indexOf(props);\n                    if (index > -1) {\n                        const /** @type {?} */ children = father.props.children.splice(index, 1);\n                        this.instance.setProps({\n                            ...father.props,\n                            ...{\n                                children: children\n                            }\n                        });\n                    }\n                } catch ( /** @type {?} */e) {\n                    console.log(e);\n                }\n            } else {\n                let /** @type {?} */ index = this.pageProps.indexOf(props);\n                if (index > -1) {\n                    this.pageProps.splice(index, 1);\n                }\n            }\n        }\n        this.updateHistory();\n    }\n/**\n * @param {?} props\n * @param {?=} ids\n * @return {?}\n */\ngetFather(props: DesignLibraryProp, ids: any[] = []) {\n        ids.push(props.uuid);\n        if (props.father) {\n            let /** @type {?} */ father = this.getPropsByUid(props.father);\n            if (father) {\n                ids = this.getFather(( /** @type {?} */((<DesignLibraryProp>father))), ids);\n            }\n        }\n        return ids;\n    }\n/**\n * @param {?} uuid\n * @param {?=} data\n * @return {?}\n */\ngetPropsByUid(uuid: string, data?: DesignLibraryProp[]): DesignLibraryProp | false {\n        data = data || this.pageProps;\n        for (let /** @type {?} */ i = 0; i < data.length; i++) {\n            const /** @type {?} */ item = data[i];\n            if (item.uuid + '' === uuid + '') {\n                return item;\n            } else if (item.props.children) {\n                const /** @type {?} */ res = this.getPropsByUid(uuid, item.props.children);\n                if (res) {\n                    return res;\n                }\n            }\n        }\n        return false;\n    }\n/**\n * @return {?}\n */\ngetHistory(): DesignHistoryProp[] {\n        let /** @type {?} */ local = localStorage.getItem(this.historyKey);\n        if (local) {\n            const /** @type {?} */ items = /** @type {?} */(( JSON.parse(local) as DesignHistoryProp[]));\n            this.historys = items;\n            return items;\n        } else {\n            return [];\n        }\n    }\n/**\n * @return {?}\n */\nupdateHistory(): void {\n        this.historys.unshift({\n            name: new Date().toISOString(),\n            data: this.pageProps\n        });\n        if (this.historys.length > 50) {\n            this.historys = this.historys.splice(this.historys.length, this.historys.length - 50);\n        }\n        localStorage.setItem(this.historyKey, JSON.stringify(this.historys));\n    }\n/**\n * @param {?=} item\n * @return {?}\n */\nbackToHistory(item: DesignHistoryProp = null) {\n        if (!item) {\n            item = this.getHistory()[0];\n        }\n        this.pageProps = item.data;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [DESIGN_COMPONENTS, ] }, ]},\n{type: DesignLibraryService, },\n{type: FormBuilder, },\n];\n}\n\nfunction DesignPropsService_tsickle_Closure_declarations() {\n/** @type {?} */\nDesignPropsService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDesignPropsService.ctorParameters;\n/** @type {?} */\nDesignPropsService.prototype.props;\n/** @type {?} */\nDesignPropsService.prototype.pageProps;\n/** @type {?} */\nDesignPropsService.prototype._settingProps;\n/** @type {?} */\nDesignPropsService.prototype.settingForm;\n/** @type {?} */\nDesignPropsService.prototype.instance;\n/** @type {?} */\nDesignPropsService.prototype.fathers;\n/** @type {?} */\nDesignPropsService.prototype.fathersProps;\n/** @type {?} */\nDesignPropsService.prototype.historyKey;\n/** @type {?} */\nDesignPropsService.prototype.historys;\n/** @type {?} */\nDesignPropsService.prototype.removePosition;\n/** @type {?} */\nDesignPropsService.prototype.library;\n/** @type {?} */\nDesignPropsService.prototype.fb;\n}\n\nexport class DesignLibraryService {\nprivate components: { [key: string]: Type<any> }[] = [];\n/**\n * @param {?} components\n */\nconstructor(\n         components: any\n    ) {\n        this.components = flatten(components);\n    }\n/**\n * @param {?} name\n * @return {?}\n */\nget(name: string) {\n        let /** @type {?} */ com: any;\n        this.components.map(item => {\n            if (item[name]) {\n                com = item[name];\n            }\n        });\n        return com;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [DESIGN_LIBRARYS, ] }, ]},\n];\n}\n\nfunction DesignLibraryService_tsickle_Closure_declarations() {\n/** @type {?} */\nDesignLibraryService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDesignLibraryService.ctorParameters;\n/** @type {?} */\nDesignLibraryService.prototype.components;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\nimport {\n    ComponentFactoryResolver, ComponentRef, Directive,\n    Injector, Input, NgModuleFactory, NgModuleRef,\n    OnChanges, OnDestroy, SimpleChanges, StaticProvider,\n    Type, ViewContainerRef, Output, OnInit, ComponentFactory,\n    HostListener, EventEmitter, TemplateRef,\n    IterableDiffers, NgIterable, IterableDiffer, IterableChangeRecord,\n    IterableChanges, Renderer2, InjectionToken, Inject\n} from '@angular/core';\nimport { ReactComponent } from 'ng-react-component';\nimport { fromEvent } from 'rxjs/observable/fromEvent';\nimport { DesignLibraryProp, DesignLibraryService, DesignPropsService, DesignApiService } from './types';\nimport { KeyValueChanges } from '@angular/core';\nimport { guid } from './guid';\nexport const /** @type {?} */ DRAG_DROP_ALL = new InjectionToken('DRAG_DROP_ALL');\nexport class NgComponentDirective implements OnChanges {\n    viewContainerRef: ViewContainerRef;\n    componentRef: ComponentRef<ReactComponent<any, any>>;\n    moduleRef: any;\n    // 组件列表\n     ngComponent: NgIterable<DesignLibraryProp>;\n    // 是否预览\n     ngComponentPreview: boolean;\n    // state\n     ngComponentState: any;\n    // class\n     ngComponentClass: any;\n    // style\n     ngComponentStyle: any;\n    // 是否可以拖拽\n     ngComponentDrag: any;\n    // 是否可以放置\n     ngComponentDrop: any;\n     ngComponentInstance: any;\n\n     ngComponentClick: (sm: any, instance: any) => {};\n\n    instances: any[] = [];\nprivate _differ: IterableDiffer<any>;\n/**\n * @param {?} _viewContainerRef\n * @param {?} _template\n * @param {?} differs\n * @param {?} librarys\n * @param {?} api\n * @param {?} props\n * @param {?} render\n * @param {?} dragDropAll\n */\nconstructor(\nprivate _viewContainerRef: ViewContainerRef,\nprivate _template: TemplateRef<any>,\nprivate differs: IterableDiffers,\nprivate librarys: DesignLibraryService,\nprivate api: DesignApiService,\nprivate props: DesignPropsService,\nprivate render: Renderer2,\nprivate dragDropAll: boolean\n    ) {\n        this.viewContainerRef = _viewContainerRef;\n    }\n/**\n * @return {?}\n */\nngDoCheck(): void {\n        if (this._differ) {\n            const /** @type {?} */ changes = this._differ.diff(this.ngComponent);\n            if (changes) {\n                changes.forEachOperation((item: IterableChangeRecord<any>, adjustedPreviousIndex: number, currentIndex: number) => {\n                    if (item.previousIndex == null) {\n                        this.createComponent(item, currentIndex);\n                    } else if (currentIndex == null) {\n                        this._viewContainerRef.remove(adjustedPreviousIndex);\n                    } else {\n                        const /** @type {?} */ view = /** @type {?} */(( this._viewContainerRef.get(adjustedPreviousIndex)));\n                        this._viewContainerRef.move(view, currentIndex);\n                    }\n                });\n            }\n        }\n    }\n/**\n * @param {?} item\n * @param {?} currentIndex\n * @return {?}\n */\nprivate createComponent(item: IterableChangeRecord<DesignLibraryProp>, currentIndex) {\n        try {\n            const /** @type {?} */ designLibraryProp: DesignLibraryProp = item.item;\n            if (designLibraryProp) {\n                let /** @type {?} */ component: Type<any>;\n                const /** @type {?} */ libs = this.librarys.get(designLibraryProp.name);\n                if (this.ngComponentPreview) {\n                    component = libs.view;\n                } else {\n                    component = libs.setting;\n                }\n                const /** @type {?} */ elInjector = this.viewContainerRef.parentInjector;\n                const /** @type {?} */ componentFactoryResolver: ComponentFactoryResolver = this.moduleRef ? this.moduleRef.componentFactoryResolver :\n                    elInjector.get(ComponentFactoryResolver);\n                const /** @type {?} */ componentFactory: ComponentFactory<any> =\n                    componentFactoryResolver.resolveComponentFactory(component);\n                const /** @type {?} */ componentRef = this.viewContainerRef.createComponent<ReactComponent<any, any>>(\n                    componentFactory,\n                    currentIndex,\n                    elInjector\n                );\n                // designLibraryProp.props = JSON.parse(JSON.stringify(designLibraryProp.props));\n                const { instance } = componentRef;\n                if (designLibraryProp.props) {\n                    instance.props = designLibraryProp.props;\n                }\n                if (designLibraryProp.state) {\n                    instance.state = designLibraryProp.state;\n                }\n                if (instance.onClick && instance.onClick.subscribe) {\n                    instance.onClick.subscribe((ev: MouseEvent) => {\n                        if (this.ngComponentPreview) {\n                            this.props.setActiveSettingProps(designLibraryProp, instance);\n                            ev.stopPropagation();\n                        }\n                    });\n                }\n                instance.setClass(instance.props.classObj);\n                instance.setStyle(instance.props.style);\n\n                instance.instance = this.ngComponentInstance;\n                if (this.ngComponentDrag || this.dragDropAll) {\n                    this.setDrage(instance);\n                }\n                if (this.ngComponentDrop || this.dragDropAll) {\n                    this.setDrop(instance);\n                }\n                if (designLibraryProp.uuid) {\n                    instance.guid = designLibraryProp.uuid;\n                } else {\n                    designLibraryProp.uuid = instance.guid = guid();\n                }\n                this.api.save(instance, designLibraryProp, this.ngComponentPreview);\n            }\n        } catch ( /** @type {?} */err) {\n            console.log(`${this.ngComponentPreview ? 'preview' : 'setting'} is not fond`, item);\n            console.dir(err);\n        }\n    }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n        this.viewContainerRef.clear();\n        if ('ngComponent' in changes) {\n            const /** @type {?} */ value = changes['ngComponent'].currentValue;\n            if (value && !this._differ) {\n                try {\n                    this._differ = this.differs.find(value).create()\n                } catch ( /** @type {?} */err) { }\n            }\n        }\n    }\n/**\n * @param {?} instance\n * @return {?}\n */\nprivate setDrage(instance: ReactComponent<any, any>) {\n        instance.setAttribute({\n            draggable: true\n        });\n        const /** @type {?} */ ele = instance.ele.nativeElement;\n        let /** @type {?} */ uuid: string;\n        fromEvent(ele, 'dragstart').subscribe((ev: DragEvent) => {\n            uuid = instance.guid;\n            ev.dataTransfer.setData(\"name\", 'guid_' + instance.guid);\n            ev.stopPropagation();\n        });\n        fromEvent(ele, 'dragend').subscribe((ev: DragEvent) => {\n            // dragend 删除这一个\n            // this.history.removeComponentByUuid(uuid);\n        });\n    }\n/**\n * @param {?} name\n * @return {?}\n */\nprivate isGuid(name: string) {\n        return name.indexOf('guid_') > -1;\n    }\n/**\n * @param {?} name\n * @return {?}\n */\nprivate trimGuid(name: string) {\n        return name.replace('guid_', '');\n    }\n/**\n * @param {?} obj\n * @return {?}\n */\nprivate deepCopy(obj: any) {\n        try {\n            return JSON.parse(JSON.stringify(obj));\n        } catch ( /** @type {?} */err) {\n            console.dir(err);\n            return {};\n        }\n    }\n/**\n * @param {?} instance\n * @return {?}\n */\nprivate setDrop(instance: ReactComponent<any, any>) {\n        const /** @type {?} */ ele = instance.ele.nativeElement;\n        fromEvent(ele, 'drop').subscribe((ev: DragEvent) => {\n            ev.preventDefault();\n            ev.stopPropagation();\n            var /** @type {?} */ data = ev.dataTransfer.getData(\"name\");\n            var /** @type {?} */ uuid = this.trimGuid(data);\n            if (!this.isGuid(data)) {\n                // 获取props\n                const /** @type {?} */ props = this.props.getPropsByName(data);\n                instance.props.children = instance.props.children || [];\n                const /** @type {?} */ deepProps = this.deepCopy(props);\n                // 记录上级\n                deepProps.father = instance.guid;\n                instance.props.children.push(deepProps);\n                this.props.instance.props.children.push(deepProps)\n            } else if (uuid !== instance.guid) {\n                // 移动已存在props\n                let /** @type {?} */ props = this.getInstanceProps(uuid);\n                if (props) {\n                    const /** @type {?} */ deepProps = this.deepCopy(props);\n                    deepProps.father = instance.guid;\n                    instance.props.children.push(deepProps);\n                }\n            }\n        });\n        fromEvent(ele, 'dragleave').subscribe((ev: DragEvent) => {\n            // dragend 删除这一个\n            this.render.removeStyle(ele, 'dashed');\n            ev.preventDefault();\n            ev.stopPropagation();\n        });\n        fromEvent(ele, 'dragover').subscribe((ev: DragEvent) => {\n            this.render.setStyle(ele, 'dashed', '1px lodash red');\n            ev.preventDefault();\n            ev.stopPropagation();\n        });\n    }\n/**\n * @param {?} uuid\n * @return {?}\n */\nprivate getInstanceProps(uuid: string) {\n        let /** @type {?} */ props: DesignLibraryProp;\n        this.instances.map(res => {\n            if (res.guid === uuid) {\n                props = res.props;\n            }\n        });\n        return props;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{ selector: '[ngComponent]' }, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n{type: TemplateRef, },\n{type: IterableDiffers, },\n{type: DesignLibraryService, },\n{type: DesignApiService, },\n{type: DesignPropsService, },\n{type: Renderer2, },\n{type: undefined, decorators: [{ type: Inject, args: [DRAG_DROP_ALL, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'ngComponent': [{ type: Input },],\n'ngComponentPreview': [{ type: Input },],\n'ngComponentState': [{ type: Input },],\n'ngComponentClass': [{ type: Input },],\n'ngComponentStyle': [{ type: Input },],\n'ngComponentDrag': [{ type: Input },],\n'ngComponentDrop': [{ type: Input },],\n'ngComponentInstance': [{ type: Input },],\n'ngComponentClick': [{ type: Input },],\n};\n}\n\nfunction NgComponentDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nNgComponentDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgComponentDirective.ctorParameters;\n/** @type {?} */\nNgComponentDirective.propDecorators;\n/** @type {?} */\nNgComponentDirective.prototype.viewContainerRef;\n/** @type {?} */\nNgComponentDirective.prototype.componentRef;\n/** @type {?} */\nNgComponentDirective.prototype.moduleRef;\n/** @type {?} */\nNgComponentDirective.prototype.ngComponent;\n/** @type {?} */\nNgComponentDirective.prototype.ngComponentPreview;\n/** @type {?} */\nNgComponentDirective.prototype.ngComponentState;\n/** @type {?} */\nNgComponentDirective.prototype.ngComponentClass;\n/** @type {?} */\nNgComponentDirective.prototype.ngComponentStyle;\n/** @type {?} */\nNgComponentDirective.prototype.ngComponentDrag;\n/** @type {?} */\nNgComponentDirective.prototype.ngComponentDrop;\n/** @type {?} */\nNgComponentDirective.prototype.ngComponentInstance;\n/** @type {?} */\nNgComponentDirective.prototype.ngComponentClick;\n/** @type {?} */\nNgComponentDirective.prototype.instances;\n/** @type {?} */\nNgComponentDirective.prototype._differ;\n/** @type {?} */\nNgComponentDirective.prototype._viewContainerRef;\n/** @type {?} */\nNgComponentDirective.prototype._template;\n/** @type {?} */\nNgComponentDirective.prototype.differs;\n/** @type {?} */\nNgComponentDirective.prototype.librarys;\n/** @type {?} */\nNgComponentDirective.prototype.api;\n/** @type {?} */\nNgComponentDirective.prototype.props;\n/** @type {?} */\nNgComponentDirective.prototype.render;\n/** @type {?} */\nNgComponentDirective.prototype.dragDropAll;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { OnInit, Input } from '@angular/core';\nimport { FormGroup, FormControl } from '@angular/forms';\nexport class ControlBase {\n     ele: HTMLElement;\n     props: FormGroup;\nconstructor() { }\n/**\n * @param {?} name\n * @param {?=} _default\n * @return {?}\n */\ncheckControl(name: string, _default: string = '') {\n        if (!this.props.contains(name)) {\n            this.createControl(name, _default);\n        }\n    }\n/**\n * @param {?} name\n * @return {?}\n */\ngetStyle(name: string) {\n        if (this.ele) {\n            return this.ele.style[this.strToHump(name)];\n        } else {\n            return '';\n        }\n    }\n/**\n * @param {?} name\n * @return {?}\n */\nstrToHump(name: string) {\n        const /** @type {?} */ re = /-(\\w)/g;\n        return name.replace(re, function ($0, $1) {\n            return $1.toUpperCase();\n        });\n    }\n/**\n * @param {?} name\n * @param {?} _default\n * @return {?}\n */\ncreateControl(name: string, _default: string) {\n        this.props.addControl(name, new FormControl(_default));\n    }\n/**\n * @param {?} px\n * @return {?}\n */\npxToNumber(px: string) {\n        if (!px) {\n            return '0';\n        }\n        return px.replace('px', '');\n    }\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'ele': [{ type: Input },],\n'props': [{ type: Input },],\n};\n}\n\nfunction ControlBase_tsickle_Closure_declarations() {\n/** @type {?} */\nControlBase.propDecorators;\n/** @type {?} */\nControlBase.prototype.ele;\n/** @type {?} */\nControlBase.prototype.props;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, OnInit, Input } from '@angular/core';\nimport { ControlBase } from '../base';\nexport class ShareColorComponent extends ControlBase implements OnInit {\nconstructor() { \n        super();\n    }\n/**\n * @return {?}\n */\nngOnInit() {\n        this.checkControl('color', this.getStyle('color'));\n        this.checkControl('background-color', this.getStyle('background-color'));\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'share-color',\n    template: `\n      <div class=\"setting-row\" [formGroup]=\"props\">\n          <h1>颜色</h1>\n          <div class=\"setting-row-input\">\n              <div class=\"setting-row-input-label\">\n                  背景色:\n              </div>\n              <div class=\"setting-row-input-content\">\n                  <input type=\"color\" placeholder=\"背景色\" [formControlName]=\"'background-color'\">\n              </div>\n              <span class=\"setting-row-input-unit\"></span>\n          </div>\n          <div class=\"setting-row-input\">\n              <div class=\"setting-row-input-label\">\n                  前景色:\n              </div>\n              <div class=\"setting-row-input-content\">\n                  <input type=\"color\" placeholder=\"背景色\" [formControlName]=\"'color'\">\n              </div>\n              <span class=\"setting-row-input-unit\"></span>\n          </div>\n      </div>\n    `,\n    styles: [`\n      .row {\n        display: -webkit-box;\n        display: -ms-flexbox;\n        display: flex;\n        -webkit-box-orient: horizontal;\n        -webkit-box-direction: normal;\n            -ms-flex-direction: row;\n                flex-direction: row;\n        width: 100%;\n        margin-top: 5px; }\n        .row input {\n          -webkit-box-flex: 1;\n              -ms-flex: 1;\n                  flex: 1;\n          width: 50%; }\n    `]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ShareColorComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nShareColorComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nShareColorComponent.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, OnInit, Input } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { ControlBase } from '../base';\nexport class ShareSizeComponent extends ControlBase implements OnInit {\n     props: FormGroup;\n     unit: string[] = ['%', 'px']\nconstructor() {\n        super();\n    }\n/**\n * @return {?}\n */\nngOnInit() {\n        this.checkControl(`width.${this.unit[0]}`, '100');\n        this.checkControl(`height.px`, '50');\n        this.checkControl(`line-height.px`, '50');\n        this.checkControl(`min-height.px`, '50');\n        this.checkControl(`min-width.${this.unit[0]}`, '100');\n        try {\n            this.props.controls['height.px'].valueChanges.subscribe(res => {\n                this.props.controls['line-height.px'].setValue(res);\n                this.props.controls['min-height.px'].setValue(res);\n            });\n            this.props.controls[`width.${this.unit[0]}`].valueChanges.subscribe(res => {\n                this.props.controls[`min-width.${this.unit[0]}`].setValue(res);\n            });\n        } catch ( /** @type {?} */err) {\n            console.log(this.props.get('height.px'))\n        }\n    }\n/**\n * @param {?} name\n * @return {?}\n */\nclearValue(name: string) {\n        this.props.controls[name].setValue(null);\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'share-size',\n    template: `\n      <div class=\"setting-row\" [formGroup]=\"props\">\n          <h1>大小设置</h1>\n          <div class=\"setting-row-input\">\n              <label class=\"setting-row-input-label\" for=\"setting-row-input-width\">\n                  宽度:\n              </label>\n              <div class=\"setting-row-input-content\">\n                  <input type=\"number\" #width id=\"setting-row-input-width\" [attr.placeholder]=\"'宽度'+unit[0]\" [formControlName]=\"'width.'+unit[0]\">\n              </div>\n              <span class=\"setting-row-input-unit\">\n                  {{unit[0]}}\n              </span>\n              <span (click)=\"clearValue('width.'+unit[0])\" class=\"setting-row-input-unit\">自动</span>\n          </div>\n          <div class=\"setting-row-input\">\n              <label class=\"setting-row-input-label\" for=\"setting-row-input-height\">\n                  高度:\n              </label>\n              <div class=\"setting-row-input-content\">\n                  <input type=\"number\" id=\"setting-row-input-height\" placeholder=\"高度\" formControlName=\"height.px\">\n              </div>\n              <span class=\"setting-row-input-unit\">px</span>\n              <span (click)=\"clearValue('height.px')\" class=\"setting-row-input-unit\">自动</span>\n          </div>\n          <div class=\"setting-row-input\">\n              <label class=\"setting-row-input-label\" for=\"setting-row-input-height\">\n                  行高:\n              </label>\n              <div class=\"setting-row-input-content\">\n                  <input type=\"number\" id=\"setting-row-input-height\" placeholder=\"行高\" formControlName=\"line-height.px\">\n              </div>\n              <span class=\"setting-row-input-unit\">px</span>\n              <span (click)=\"clearValue('line-height.px')\" class=\"setting-row-input-unit\">自动</span>\n          </div>\n      </div>\n    `,\n    styles: [`\n      :host {\n        display: block; }\n    `]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'props': [{ type: Input },],\n'unit': [{ type: Input },],\n};\n}\n\nfunction ShareSizeComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nShareSizeComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nShareSizeComponent.ctorParameters;\n/** @type {?} */\nShareSizeComponent.propDecorators;\n/** @type {?} */\nShareSizeComponent.prototype.props;\n/** @type {?} */\nShareSizeComponent.prototype.unit;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, OnInit, Input } from '@angular/core';\nimport { FormGroup, FormControl } from '@angular/forms';\nimport { ControlBase } from '../base';\nexport class ShareBackgroundComponent extends ControlBase implements OnInit {\nconstructor() {\n        super();\n    }\n/**\n * @return {?}\n */\nngOnInit() {\n        this.checkControl('background-image', '');\n        this.checkControl('background-size', 'cover');\n        this.checkControl('background-position', 'cover');\n        this.checkControl('background-repeat', 'no-repeat');\n    }\n/**\n * @param {?} e\n * @return {?}\n */\nbackgroundImageChange(e: any) {\n        this.props.get('background-image').setValue(`url(${e.target.value})`);\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'share-background',\n    template: `\n      <!-- <div class=\"setting-row\" [formGroup]=\"props\">\n          <h1>背景设置</h1>\n          <div class=\"setting-row-input\">\n              <div class=\"setting-row-input-label\">\n                  图片:\n              </div>\n              <div class=\"setting-row-input-content\">\n                  <input type=\"text\" (change)=\"backgroundImageChange($event)\" [attr.value]=\"props.get('background-image').value\">\n              </div>\n              <span class=\"setting-row-input-unit\"></span>\n          </div>\n          <div class=\"setting-row-input\">\n              <div class=\"setting-row-input-label\">\n                  平铺:\n              </div>\n              <div class=\"setting-row-input-content\">\n                  <input type=\"text\" [formControlName]=\"'background-repeat'\">\n              </div>\n              <span class=\"setting-row-input-unit\"></span>\n          </div>\n          <div class=\"setting-row-input\">\n              <div class=\"setting-row-input-label\">\n                  大小:\n              </div>\n              <div class=\"setting-row-input-content\">\n                  <input type=\"text\" [formControlName]=\"'background-size'\">\n              </div>\n              <span class=\"setting-row-input-unit\"></span>\n          </div>\n          <div class=\"setting-row-input\">\n              <div class=\"setting-row-input-label\">\n                  位置:\n              </div>\n              <div class=\"setting-row-input-content\">\n                  <input type=\"text\" [formControlName]=\"'background-position'\">\n              </div>\n              <span class=\"setting-row-input-unit\"></span>\n          </div>\n      </div> -->\n    `\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ShareBackgroundComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nShareBackgroundComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nShareBackgroundComponent.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, OnInit, ViewChild, ElementRef, Input } from '@angular/core';\nimport { fromEvent } from 'rxjs/observable/fromEvent';\nimport { combineLatest } from 'rxjs/observable/combineLatest';\nimport { map } from 'rxjs/operators/map';\nimport { FormGroup } from '@angular/forms';\nimport { FormControl } from '@angular/forms';\nimport { ControlBase } from '../base';\nexport class ShareMarginComponent extends ControlBase implements OnInit {\nconstructor() {\n        super();\n    }\n/**\n * @return {?}\n */\nngOnInit() {\n        const /** @type {?} */ margin: string = this.props.get('margin').value;\n        const [top, right, bottom, left] = margin.split(\" \");\n        this.checkControl('margin-top.px', this.pxToNumber(top));\n        this.checkControl('margin-right.px', this.pxToNumber(right));\n        this.checkControl('margin-bottom.px', this.pxToNumber(bottom));\n        this.checkControl('margin-left.px', this.pxToNumber(left));\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'share-margin',\n    template: `\n      <div class=\"setting-row\" [formGroup]=\"props\">\n          <h1>外间距设置</h1>\n          <div class=\"setting-row-input\">\n              <div class=\"setting-row-input-label\">\n                  上间距:\n              </div>\n              <div class=\"setting-row-input-content\">\n                  <input type=\"number\" formControlName=\"margin-top.px\">\n              </div>\n              <span class=\"setting-row-input-unit\">px</span>\n          </div>\n          <div class=\"setting-row-input\">\n              <div class=\"setting-row-input-label\">\n                  右间距:\n              </div>\n              <div class=\"setting-row-input-content\">\n                  <input type=\"number\" formControlName=\"margin-right.px\">\n              </div>\n              <span class=\"setting-row-input-unit\">px</span>\n          </div>\n          <div class=\"setting-row-input\">\n              <div class=\"setting-row-input-label\">\n                  下间距:\n              </div>\n              <div class=\"setting-row-input-content\">\n                  <input type=\"number\" formControlName=\"margin-bottom.px\">\n              </div>\n              <span class=\"setting-row-input-unit\">px</span>\n          </div>\n          <div class=\"setting-row-input\">\n              <div class=\"setting-row-input-label\">\n                  左间距:\n              </div>\n              <div class=\"setting-row-input-content\">\n                  <input type=\"number\" formControlName=\"margin-left.px\">\n              </div>\n              <span class=\"setting-row-input-unit\">px</span>\n          </div>\n      </div>\n    `,\n    styles: [`\n      :host {\n        display: block; }\n    `]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ShareMarginComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nShareMarginComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nShareMarginComponent.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, OnInit, ViewChild, ElementRef, Input } from '@angular/core';\nimport { fromEvent } from 'rxjs/observable/fromEvent';\nimport { combineLatest } from 'rxjs/observable/combineLatest';\nimport { map } from 'rxjs/operators/map';\nimport { FormGroup } from '@angular/forms';\nimport { FormControl } from '@angular/forms';\nimport { ControlBase } from '../base';\nexport class SharePaddingComponent extends ControlBase implements OnInit {\nconstructor() {\n        super();\n    }\n/**\n * @return {?}\n */\nngOnInit() {\n        this.checkControl('padding', '0');\n        const /** @type {?} */ margin: string = this.props.get('padding').value;\n        const [top, right, bottom, left] = margin.split(\" \");\n        this.checkControl('padding-top.px', this.pxToNumber(top));\n        this.checkControl('padding-right.px', this.pxToNumber(right));\n        this.checkControl('padding-bottom.px', this.pxToNumber(bottom));\n        this.checkControl('padding-left.px', this.pxToNumber(left));\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'share-padding',\n    template: `\n      <div class=\"setting-row\" [formGroup]=\"props\">\n          <h1>內间距设置</h1>\n          <div class=\"setting-row-input\">\n              <div class=\"setting-row-input-label\">\n                  上间距:\n              </div>\n              <div class=\"setting-row-input-content\">\n                  <input type=\"number\" formControlName=\"padding-top.px\">\n              </div>\n              <span class=\"setting-row-input-unit\">px</span>\n          </div>\n          <div class=\"setting-row-input\">\n              <div class=\"setting-row-input-label\">\n                  右间距:\n              </div>\n              <div class=\"setting-row-input-content\">\n                  <input type=\"number\" formControlName=\"padding-right.px\">\n              </div>\n              <span class=\"setting-row-input-unit\">px</span>\n          </div>\n          <div class=\"setting-row-input\">\n              <div class=\"setting-row-input-label\">\n                  下间距:\n              </div>\n              <div class=\"setting-row-input-content\">\n                  <input type=\"number\" formControlName=\"padding-bottom.px\">\n              </div>\n              <span class=\"setting-row-input-unit\">px</span>\n          </div>\n          <div class=\"setting-row-input\">\n              <div class=\"setting-row-input-label\">\n                  左间距:\n              </div>\n              <div class=\"setting-row-input-content\">\n                  <input type=\"number\" formControlName=\"padding-left.px\">\n              </div>\n              <span class=\"setting-row-input-unit\">px</span>\n          </div>\n      </div>\n    `\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction SharePaddingComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nSharePaddingComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSharePaddingComponent.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, OnInit, ViewChild, ElementRef, Input } from '@angular/core';\nimport { fromEvent } from 'rxjs/observable/fromEvent';\nimport { combineLatest } from 'rxjs/observable/combineLatest';\nimport { map } from 'rxjs/operators/map';\nimport { FormGroup } from '@angular/forms';\nimport { FormControl } from '@angular/forms';\nimport { ControlBase } from '../base';\nexport class ShareBorderComponent extends ControlBase implements OnInit {\nconstructor() {\n        super();\n    }\n/**\n * @return {?}\n */\nngOnInit() {\n        if (this.props.contains('border')) {\n            const /** @type {?} */ border: string = this.props.get('border').value;\n            const [width, style, color] = border.split(' ');\n            this.checkControl('border-top-width.px', this.pxToNumber(width));\n            this.checkControl('border-right-width.px', this.pxToNumber(width));\n            this.checkControl('border-bottom-width.px', this.pxToNumber(width));\n            this.checkControl('border-left-width.px', this.pxToNumber(width));\n            this.checkControl('border-color', color);\n            this.checkControl('border-style', style);\n        }\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'share-border',\n    template: `\n      <div class=\"setting-row\" [formGroup]=\"props\">\n          <h1>边框设置</h1>\n          <div class=\"setting-row-input\" *ngIf=\"props.contains('border-top-width.px')\">\n              <div class=\"setting-row-input-label\">\n                  上边框:\n              </div>\n              <div class=\"setting-row-input-content\">\n                  <input type=\"number\" min=\"0\" step=\"1\" formControlName=\"border-top-width.px\">\n              </div>\n              <span class=\"setting-row-input-unit\">px</span>\n          </div>\n          <div class=\"setting-row-input\" *ngIf=\"props.contains('border-right-width.px')\">\n              <div class=\"setting-row-input-label\">\n                  右边框:\n              </div>\n              <div class=\"setting-row-input-content\">\n                  <input type=\"number\" min=\"0\" step=\"1\" formControlName=\"border-right-width.px\">\n              </div>\n              <span class=\"setting-row-input-unit\">px</span>\n          </div>\n          <div class=\"setting-row-input\" *ngIf=\"props.contains('border-bottom-width.px')\">\n              <div class=\"setting-row-input-label\">\n                  下边框:\n              </div>\n              <div class=\"setting-row-input-content\">\n                  <input type=\"number\" min=\"0\" step=\"1\" formControlName=\"border-bottom-width.px\">\n              </div>\n              <span class=\"setting-row-input-unit\">px</span>\n          </div>\n          <div class=\"setting-row-input\" *ngIf=\"props.contains('border-left-width.px')\">\n              <div class=\"setting-row-input-label\">\n                  左边框:\n              </div>\n              <div class=\"setting-row-input-content\">\n                  <input type=\"number\" min=\"0\" step=\"1\" formControlName=\"border-left-width.px\">\n              </div>\n              <span class=\"setting-row-input-unit\">px</span>\n          </div>\n      </div>\n    `\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ShareBorderComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nShareBorderComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nShareBorderComponent.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, OnInit, Input } from '@angular/core';\nimport { ControlBase } from '../base';\nexport class ShareSwiperComponent extends ControlBase implements OnInit {\nconstructor() {\n        super();\n    }\n/**\n * @return {?}\n */\nngOnInit() {\n        this.checkControl('loop', 'true');\n        this.checkControl('speed', '300');\n        this.checkControl('delay', '3000');\n        this.checkControl('effect', 'slide');\n        this.checkControl('pagination', 'bullets');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'share-swiper',\n    template: `\n      <div class=\"setting-row\" [formGroup]=\"props\">\n          <h1>滑动设置</h1>\n          <div class=\"setting-row-input\">\n              <div class=\"setting-row-input-label\">\n                  是否循环\n              </div>\n              <div class=\"setting-row-input-content\">\n                  <select formControlName=\"loop\">\n                      <option value=\"true\">循环</option>\n                      <option value=\"false\">不循环</option>\n                  </select>\n              </div>\n          </div>\n          <div class=\"setting-row-input\">\n              <div class=\"setting-row-input-label\">\n                  速度\n              </div>\n              <div class=\"setting-row-input-content\">\n                  <input type=\"number\" formControlName=\"speed\">\n              </div>\n          </div>\n          <div class=\"setting-row-input\">\n              <div class=\"setting-row-input-label\">\n                  切换动画\n              </div>\n              <div class=\"setting-row-input-content\">\n                  <select formControlName=\"effect\">\n                      <option value=\"slide\">slide</option>\n                      <option value=\"fade\">fade</option>\n                      <option value=\"cube\">cube</option>\n                      <option value=\"coverflow\">coverflow</option>\n                      <option value=\"flip\">flip</option>\n                  </select>\n              </div>\n          </div>\n          <div class=\"setting-row-input\">\n              <div class=\"setting-row-input-label\">\n                  自动播放\n              </div>\n              <div class=\"setting-row-input-content\">\n                  <input type=\"number\" formControlName=\"delay\">\n              </div>\n          </div>\n          <div class=\"setting-row-input\">\n              <div class=\"setting-row-input-label\">\n                  页码\n              </div>\n              <div class=\"setting-row-input-content\">\n                  <select formControlName=\"pagination\">\n                      <option value=\"bullets\">bullets</option>\n                      <option value=\"fraction\">fraction</option>\n                      <option value=\"progressbar\">progressbar</option>\n                      <option value=\"custom\">custom</option>\n                  </select>\n              </div>\n          </div>\n      </div>\n    `\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ShareSwiperComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nShareSwiperComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nShareSwiperComponent.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, OnInit, Input } from '@angular/core';\nimport { ControlBase } from '../base';\nexport class SharePositionComponent extends ControlBase implements OnInit {\n    _noup: boolean = false;\n/**\n * @param {?} val\n * @return {?}\n */\nset noup(val) {\n        this._noup = true;\n    }\n    _nodown: boolean = false;\n/**\n * @param {?} val\n * @return {?}\n */\nset nodown(val) {\n        this._nodown = true;\n    }\nconstructor() {\n        super();\n    }\n/**\n * @return {?}\n */\nngOnInit() {\n        this.checkControl('position', 'relative');\n        this.checkControl('left.px', '0');\n        this.checkControl('right.px', '0');\n        if (!this._noup) {\n            this.checkControl('top.px', '0');\n        }\n        if (!this._nodown) {\n            this.checkControl('bottom.px', '0');\n        }\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'share-position',\n    template: `\n      <div class=\"setting-row\" [formGroup]=\"props\">\n              <h1>\n                  定位\n              </h1>\n              <div class=\"setting-row-input\" *ngIf=\"!_noup\">\n                  <div class=\"setting-row-input-label\">\n                      上:\n                  </div>\n                  <div class=\"setting-row-input-content\">\n                      <input type=\"number\" formControlName=\"top.px\">\n                  </div>\n                  <span class=\"setting-row-input-unit\">px</span>\n              </div>\n              <div class=\"setting-row-input\">\n                  <div class=\"setting-row-input-label\">\n                      右:\n                  </div>\n                  <div class=\"setting-row-input-content\">\n                      <input type=\"number\" formControlName=\"right.px\">\n                  </div>\n                  <span class=\"setting-row-input-unit\">px</span>\n              </div>\n              <div class=\"setting-row-input\" *ngIf=\"!_nodown\">\n                  <div class=\"setting-row-input-label\">\n                      下:\n                  </div>\n                  <div class=\"setting-row-input-content\">\n                      <input type=\"number\" formControlName=\"bottom.px\">\n                  </div>\n                  <span class=\"setting-row-input-unit\">px</span>\n              </div>\n              <div class=\"setting-row-input\">\n                  <div class=\"setting-row-input-label\">\n                      左:\n                  </div>\n                  <div class=\"setting-row-input-content\">\n                      <input type=\"number\" formControlName=\"left.px\">\n                  </div>\n                  <span class=\"setting-row-input-unit\">px</span>\n              </div>\n          </div>\n    `\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'noup': [{ type: Input },],\n'nodown': [{ type: Input },],\n};\n}\n\nfunction SharePositionComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nSharePositionComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSharePositionComponent.ctorParameters;\n/** @type {?} */\nSharePositionComponent.propDecorators;\n/** @type {?} */\nSharePositionComponent.prototype._noup;\n/** @type {?} */\nSharePositionComponent.prototype._nodown;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { ShareColorComponent } from './color/color';\nimport { ShareSizeComponent } from './size/size';\nimport { ShareBackgroundComponent } from './background/background';\nimport { ShareMarginComponent } from './margin/margin';\nimport { SharePaddingComponent } from './padding/padding';\nimport { ShareBorderComponent } from './border/border';\nimport { ShareSwiperComponent } from './swiper/swiper';\n\n\n\nimport { SharePositionComponent } from './position/position';\n\nexport const /** @type {?} */ shareComponents = [\n    ShareColorComponent,\n    ShareSizeComponent,\n    ShareBackgroundComponent,\n    ShareMarginComponent,\n    SharePaddingComponent,\n    SharePositionComponent,\n    ShareBorderComponent,\n    ShareSwiperComponent\n];\n","\nimport {\n    ChangeDetectorRef, Directive, DoCheck, EmbeddedViewRef, Input,\n    IterableChangeRecord, IterableChanges, IterableDiffer,\n    IterableDiffers, NgIterable, OnChanges, SimpleChanges, TemplateRef,\n    TrackByFunction, ViewContainerRef, forwardRef, isDevMode\n} from '@angular/core';\n\nimport {\n    KeyValueDiffer, KeyValueChanges, KeyValueChangeRecord,\n    KeyValueDifferFactory, KeyValueDiffers\n} from '@angular/core';\n\nexport interface EachKeyValue<T> {\n    [key: string]: T;\n}\nexport class NgEachOfContext<T> {\n/**\n * @param {?} $implicit\n * @param {?} ngEachOf\n * @param {?} key\n */\nconstructor(\npublic $implicit: T,\npublic ngEachOf: EachKeyValue<T>,\npublic key: string,\n    ) { }\n}\n\nfunction NgEachOfContext_tsickle_Closure_declarations() {\n/** @type {?} */\nNgEachOfContext.prototype.$implicit;\n/** @type {?} */\nNgEachOfContext.prototype.ngEachOf;\n/** @type {?} */\nNgEachOfContext.prototype.key;\n}\n\nexport class NgEachOf<T> implements OnChanges {\n     ngEachOf: EachKeyValue<T>;\nprivate _differ: KeyValueDiffer<string, T> | null = null;\n/**\n * @param {?} _viewContainer\n * @param {?} _template\n * @param {?} _differs\n */\nconstructor(\nprivate _viewContainer: ViewContainerRef,\nprivate _template: TemplateRef<NgEachOfContext<T>>,\nprivate _differs: KeyValueDiffers\n    ) { }\n/**\n * @param {?} value\n * @return {?}\n */\nset ngForTemplate(value: TemplateRef<NgEachOfContext<T>>) {\n        if (value) {\n            this._template = value;\n        }\n    }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges): void {\n        this._viewContainer.clear();\n        if ('ngEachOf' in changes) {\n            const /** @type {?} */ value = changes['ngEachOf'].currentValue;\n            this._applyChanges(value);\n        }\n    }\n/**\n * @param {?} changes\n * @return {?}\n */\nprivate _applyChanges(changes: any[]) {\n        for (const /** @type {?} */ key in changes) {\n            const /** @type {?} */ item = changes[key];\n            const /** @type {?} */ view = this._viewContainer.createEmbeddedView(\n                this._template,\n                new NgEachOfContext<T>(item, this.ngEachOf, key),\n                parseInt(key, 16)\n            );\n        }\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{ selector: '[ngEach][ngEachOf]' }, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n{type: TemplateRef, },\n{type: KeyValueDiffers, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'ngEachOf': [{ type: Input },],\n'ngForTemplate': [{ type: Input },],\n};\n}\n\nfunction NgEachOf_tsickle_Closure_declarations() {\n/** @type {?} */\nNgEachOf.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgEachOf.ctorParameters;\n/** @type {?} */\nNgEachOf.propDecorators;\n/** @type {?} */\nNgEachOf.prototype.ngEachOf;\n/** @type {?} */\nNgEachOf.prototype._differ;\n/** @type {?} */\nNgEachOf.prototype._viewContainer;\n/** @type {?} */\nNgEachOf.prototype._template;\n/** @type {?} */\nNgEachOf.prototype._differs;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { NgComponentDirective, DRAG_DROP_ALL } from './ng-component';\nimport { DESIGN_LIBRARYS, DesignLibraryService, DesignApiService, DesignPropsService } from './types';\n\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\n\nimport { shareComponents } from './components/public_api';\nimport { NgEachOf } from './ng-each-of';\nexport class IDesignComponentModule {\n/**\n * @param {?} coms\n * @param {?=} dragDropAll\n * @return {?}\n */\npublic static forRoot(coms: any, dragDropAll: boolean = false): ModuleWithProviders {\n        return {\n            ngModule: IDesignComponentModule,\n            providers: [{\n                provide: DESIGN_LIBRARYS,\n                useValue: coms,\n                multi: true\n            },{\n                provide: DRAG_DROP_ALL,\n                useValue: dragDropAll\n            }]\n        }\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [\n        CommonModule,\n        ReactiveFormsModule\n    ],\n    exports: [\n        NgComponentDirective,\n        ...shareComponents,\n        NgEachOf\n    ],\n    declarations: [\n        NgComponentDirective,\n        ...shareComponents,\n        NgEachOf\n    ],\n    providers: [\n        DesignApiService,\n        DesignLibraryService,\n        DesignPropsService\n    ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction IDesignComponentModule_tsickle_Closure_declarations() {\n/** @type {?} */\nIDesignComponentModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nIDesignComponentModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["guid","S4","Math","random","toString","substring","flatten","arr","Array","prototype","concat","apply","DESIGN_LIBRARYS","InjectionToken","instancesMap","Map","InstanceComponent","props","instance","this","DesignApiService","get","id","save","designLibraryProp","isPreview","map","instanceComponent","view","setting","set","decorators","type","Injectable","ctorParameters","DESIGN_COMPONENTS","DesignPropsService","library","fb","_this","pageProps","fathersProps","historyKey","historys","removePosition","backToHistory","err","localStorage","clear","settingForm","group","content","valueChanges","subscribe","res","_settingProps","Object","defineProperty","val","setValue","addControl","FormControl","fathers","getFather","settingProps","length","getPropsByUid","push","setActiveSettingProps","removeClass","addClass","getPropsByName","name","com","forEach","item","addPropByName","father","deepCopyCom","deepCopy","uuid","lib","default","updateHistory","addPropsToInstanceByName","deepProps","children","toFatherProps","console","log","obj","JSON","parse","stringify","dir","isGuid","indexOf","trimGuid","replace","removePropsByUid","index","splice","setProps","assign","e","ids","data","i","getHistory","local","getItem","items","unshift","Date","toISOString","setItem","undefined","Inject","args","DesignLibraryService","FormBuilder","components","DRAG_DROP_ALL","NgComponentDirective","_viewContainerRef","_template","differs","librarys","api","render","dragDropAll","instances","viewContainerRef","ngDoCheck","_differ","changes","diff","ngComponent","forEachOperation","adjustedPreviousIndex","currentIndex","previousIndex","createComponent","remove","move","designLibraryProp_1","component","libs","ngComponentPreview","elInjector","parentInjector","componentFactory","moduleRef","componentFactoryResolver","ComponentFactoryResolver","resolveComponentFactory","instance_1","state","onClick","ev","stopPropagation","setClass","classObj","setStyle","style","ngComponentInstance","ngComponentDrag","setDrage","ngComponentDrop","setDrop","ngOnChanges","value","currentValue","find","create","setAttribute","draggable","ele","nativeElement","fromEvent","dataTransfer","setData","preventDefault","getData","getInstanceProps","removeStyle","Directive","selector","ViewContainerRef","TemplateRef","IterableDiffers","Renderer2","propDecorators","Input","ngComponentState","ngComponentClass","ngComponentStyle","ngComponentClick","ControlBase","checkControl","_default","contains","createControl","getStyle","strToHump","$0","$1","toUpperCase","pxToNumber","px","ShareColorComponent","_super","call","__extends","ngOnInit","Component","template","styles","ShareSizeComponent","unit","controls","clearValue","ShareBackgroundComponent","backgroundImageChange","target","ShareMarginComponent","_a","split","top","right","bottom","left","SharePaddingComponent","ShareBorderComponent","width","color","ShareSwiperComponent","SharePositionComponent","_noup","_nodown","noup","nodown","shareComponents","NgEachOfContext","$implicit","ngEachOf","key","NgEachOf","_viewContainer","_differs","_applyChanges","createEmbeddedView","parseInt","KeyValueDiffers","ngForTemplate","IDesignComponentModule","forRoot","coms","ngModule","providers","provide","useValue","multi","NgModule","imports","CommonModule","ReactiveFormsModule","exports","declarations"],"mappings":"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"}
